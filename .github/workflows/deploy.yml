name: Deploy Spring Boot to ECS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production  # Optional: Use GitHub Environments for secrets

    steps:
      # --- CHECKOUT CODE ---
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- SET UP JAVA ---
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # --- BUILD JAR ---
      - name: Build with Maven
        run: |
          chmod +x ./mvnw
          ./mvnw clean package -DskipTests

      # --- COPY JAR TO SERVER (TEMPORARY LOCATION) ---
      - name: Upload JAR to server (temp location)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "target/*.jar"
          target: "/home/app/temp/"
          rm: true  # Remove old temp files

      # --- DEPLOY & RESTART APP ---
      - name: Deploy and restart application
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # --- SETUP ---
            echo "=== STARTING DEPLOYMENT ==="
            DEPLOY_DIR="/home/app"
            TEMP_DIR="$DEPLOY_DIR/temp"
            TARGET_DIR="$DEPLOY_DIR/target"
            LOG_FILE="$TARGET_DIR/output.log"

            # --- VERIFY ENVIRONMENT ---
            echo "1. Checking Java version..."
            java -version || { echo "❌ Java not found"; exit 1; }

            echo "2. Checking disk space..."
            df -h

            # --- FIND NEW JAR ---
            echo "3. Locating new JAR file..."
            NEW_JAR=$(ls $TEMP_DIR/*.jar | head -1)
            if [ -z "$NEW_JAR" ]; then
              echo "❌ No JAR found in $TEMP_DIR"
              exit 1
            fi
            echo "Found: $NEW_JAR"

            # --- STOP OLD PROCESS (IF RUNNING) ---
            echo "4. Stopping existing application..."
            OLD_PID=$(pgrep -f 'java -jar' || echo "")
            if [ -n "$OLD_PID" ]; then
              echo "Stopping PID $OLD_PID..."
              kill $OLD_PID
              sleep 5  # Graceful shutdown period
            else
              echo "No running application found."
            fi

            # --- ATOMIC DEPLOYMENT ---
            echo "5. Deploying new version..."
            mkdir -p $TARGET_DIR
            mv -f $NEW_JAR $TARGET_DIR/
            chmod 755 $TARGET_DIR/*.jar

            # --- START NEW PROCESS ---
            echo "6. Starting application..."
            nohup java -jar $TARGET_DIR/*.jar > $LOG_FILE 2>&1 &

            # --- VERIFY SUCCESS ---
            echo "7. Verifying deployment..."
            sleep 5
            NEW_PID=$(pgrep -f 'java -jar' || echo "")
            if [ -z "$NEW_PID" ]; then
              echo "❌ Deployment failed! Last 50 lines of log:"
              tail -n 50 $LOG_FILE
              exit 1
            else
              echo "✅ Success! PID: $NEW_PID"
              echo "=== DEPLOYMENT COMPLETE ==="
            fi